#!/bin/bash  
export UUID=${UUID:-'0559cf7a-9eb7-4d80-9efd-0ae6f1ca9e73'}   # 节点UUID
export NEZHA_SERVER=${NEZHA_SERVER:-'tz.okpay.cf'}       # 哪吒客户端域名或ip,哪吒3个变量不全不运行
export NEZHA_PORT=${NEZHA_PORT:-'1236'}                # 哪吒端口为{443,8443,2053,2083,2087,2096}其中之一时自动开启tls
export NEZHA_KEY=${NEZHA_KEY:-'fJPWcLBS3CycHq6x8Y'}                      # 哪吒客户端密钥
export ARGO_DOMAIN=${ARGO_DOMAIN:-'jp7.foxmail.us.kg'}                  # 固定隧道域名，留空即启用临时隧道
export ARGO_AUTH=${ARGO_AUTH:-'{"AccountTag":"79adad4043570c905f194f3c1709fbed","TunnelSecret":"PmaM58wHNWlPMOyUGzNZpAOOIQ8ew/DYcFQtZjU8N5c=","TunnelID":"53d30e76-1b42-4eff-84c4-156ecfc8c8b2"}'}                      # 固定隧道token或json
export CFIP=${CFIP:-'www.visa.com.tw'}                 # argo节点优选域名
export CFPORT=${CFPORT:-'8443'}                        # argo节点端口 
export NAME=${NAME:-'AAA'}                             # 节点名称  
export FILE_PATH=${FILE_PATH:-'./.npm'}                # sub节点路径  
export ARGO_PORT=${ARGO_PORT:-'8001'}                  # argo端口 使用固定隧道token需和cf后台设置对应
export HY2_PORT=${HY2_PORT:-'50000'}                   # Hy2 端口，支持多端口玩具可填写，否则不动
export REALITY_PORT=${REALITY_PORT:-'60000'}           # reality 端口,支持多端口玩具可填写，否则不动
export SERVER_PORT="${SERVER_PORT:-${PORT:-7860}}"     # Tuic 端口，自动获取玩具端口，不用改        

echo "" | base64 -d | bash

# tail -f /dev/null
